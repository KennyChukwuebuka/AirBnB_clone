#!/usr/bin/python3
"""
unittest to test the BaseModel function
"""

import unittest
import models
import os
from models.base_model import BaseModel
from datetime import datetime
import uuid

class TestBaseModel_init(unittest.TestCase):
    """
    Class to test the BaseModel Function
    """

    def test_init_no_args(self):
        # Testing initialization with args
        self.assertEqual(BaseModel, type(BaseModel()))

    def test_init_without_kwargs(self):
	# Testing initialization without kwargs
        obj = BaseModel()
        self.assertTrue(hasattr(obj, 'id'))
        self.assertTrue(hasattr(obj, 'created_at'))
    	self.assertTrue(hasattr(obj, 'updated_at'))
    	self.assertTrue(hasattr(obj, 'name'))
    	self.assertEqual(obj.id, str)
    	self.assertIsInstance(obj.created_at, datetime)
    	self.assertIsInstance(obj.updated_at, datetime)

    def test_save_method(self):
        # Testing the saving method
	obj = BaseModel()
	obj_updated_at = obj.updated_at
	obj.save()
        new_updated_at = obj.updated_at
        self.assertNotEqual(old_updated_at, new_updated_at)

    def test_to_dict_method(self):
	# Testing the saving method
	obj = BaseModel()
	obj_dict = obj.to_dict()
	self.assertTrue(isinstance(obj_dict, dict))
	self.assertEqual(obj_dict['__class__'], 'BaseModel')
	self.assertEqual(obj_dict['id'], obj.id)
	self.assertEqual(obj_dict['created_at'], obj.created_at.isoformat())
	self.assertEqual(obj_dict['updated_at'], obj.updated_at.isoformat())

    def test_str_method(self):
	# Testing the __str__ method
	obj = BaseModel()
	obj_str = str(obj)
	self.assertTrue(isinstance(obj_str, str))
	self.assertIn('BaseModel', obj_str)
	self.assertIn(obj.id, obj_str)
	self.assertIn(obj.created_at.isoformat(), obj_str)
        self.assertIn(obj.updated_at.isoformat(), obj_str)


if __name__ == '__main__':
	unittest.main()
